import json
import os
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è TuTiBot —Å –ò–ò-–æ—Ç–≤–µ—Ç–∞–º–∏ (OpenAI, GigaChat, YandexGPT)
    Args: event - dict —Å httpMethod, body (message, hasImage)
          context - –æ–±—ä–µ–∫—Ç —Å request_id
    Returns: HTTP response —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        user_message: str = body_data.get('message', '')
        has_image: bool = body_data.get('hasImage', False)
        
        openai_key = os.environ.get('OPENAI_API_KEY')
        gigachat_key = os.environ.get('GIGACHAT_API_KEY')
        yandex_key = os.environ.get('YANDEX_API_KEY')
        
        response_text = None
        
        if openai_key:
            response_text = try_openai(openai_key, user_message, has_image)
        
        if not response_text and gigachat_key:
            response_text = try_gigachat(gigachat_key, user_message)
        
        if not response_text and yandex_key:
            response_text = try_yandexgpt(yandex_key, user_message)
        
        if not response_text:
            response_text = get_fallback_response(user_message, has_image)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({
                'response': response_text,
                'timestamp': context.request_id
            })
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': str(e)})
        }


def try_openai(api_key: str, message: str, has_image: bool) -> str:
    try:
        import openai
        openai.api_key = api_key
        
        system_prompt = "–¢—ã TuTiBot - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        
        if has_image:
            system_prompt += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–º–æ–≥–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ."
        
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        return completion.choices[0].message.content
        
    except Exception:
        return None


def try_gigachat(api_key: str, message: str) -> str:
    try:
        import requests
        
        auth_response = requests.post(
            'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
            headers={'Authorization': f'Basic {api_key}', 'RqUID': 'tutibot-request'},
            verify=False
        )
        
        if auth_response.status_code != 200:
            return None
            
        access_token = auth_response.json().get('access_token')
        
        chat_response = requests.post(
            'https://gigachat.devices.sberbank.ru/api/v1/chat/completions',
            headers={
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            },
            json={
                'model': 'GigaChat',
                'messages': [
                    {'role': 'system', 'content': '–¢—ã TuTiBot - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.'},
                    {'role': 'user', 'content': message}
                ],
                'max_tokens': 500,
                'temperature': 0.7
            },
            verify=False
        )
        
        if chat_response.status_code == 200:
            return chat_response.json()['choices'][0]['message']['content']
        
        return None
        
    except Exception:
        return None


def try_yandexgpt(api_key: str, message: str) -> str:
    try:
        import requests
        
        folder_id = os.environ.get('YANDEX_FOLDER_ID', '')
        
        response = requests.post(
            'https://llm.api.cloud.yandex.net/foundationModels/v1/completion',
            headers={
                'Authorization': f'Api-Key {api_key}',
                'Content-Type': 'application/json'
            },
            json={
                'modelUri': f'gpt://{folder_id}/yandexgpt-lite',
                'completionOptions': {
                    'stream': False,
                    'temperature': 0.7,
                    'maxTokens': 500
                },
                'messages': [
                    {'role': 'system', 'text': '–¢—ã TuTiBot - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.'},
                    {'role': 'user', 'text': message}
                ]
            }
        )
        
        if response.status_code == 200:
            return response.json()['result']['alternatives'][0]['message']['text']
        
        return None
        
    except Exception:
        return None


def get_fallback_response(message: str, has_image: bool) -> str:
    if has_image:
        return 'üñºÔ∏è –í–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤—å API –∫–ª—é—á:\n‚Ä¢ OpenAI (–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ VPN)\n‚Ä¢ GigaChat –æ—Ç –°–±–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–§)\n‚Ä¢ YandexGPT (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–§)'
    
    lower = message.lower()
    
    if any(word in lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
        return '–ü—Ä–∏–≤–µ—Ç! –Ø TuTiBot, —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä'
    
    if any(word in lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ —Å–∞–º']):
        return '–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ 24/7 üöÄ'
    
    if any(word in lower for word in ['–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å', 'api']):
        return '''–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏! ü§ñ

–î–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤—å –æ–¥–∏–Ω –∏–∑ API –∫–ª—é—á–µ–π:

üîπ GigaChat (–°–±–µ—Ä) - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–§
   –ü–æ–ª—É—á–∏—Ç—å: https://developers.sber.ru/gigachat

üîπ YandexGPT - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–§  
   –ü–æ–ª—É—á–∏—Ç—å: https://cloud.yandex.ru/services/yandexgpt

üîπ OpenAI - –Ω—É–∂–µ–Ω VPN
   –ü–æ–ª—É—á–∏—Ç—å: https://platform.openai.com

–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –ª—é–±–æ–π –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üòä'''
    
    if any(word in lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
        return '–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å! üòä'
    
    if '?' in message or any(word in lower for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º']):
        return f'–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î\n\n–î–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤—å API:\n‚Ä¢ GigaChat (–°–±–µ—Ä) - –¥–ª—è –†–§\n‚Ä¢ YandexGPT - –¥–ª—è –†–§\n‚Ä¢ OpenAI - —á–µ—Ä–µ–∑ VPN'
    
    return '–ü–æ–Ω—è–ª —Ç–µ–±—è! –î–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤—å GigaChat, YandexGPT –∏–ª–∏ OpenAI API! ü§ñ'
