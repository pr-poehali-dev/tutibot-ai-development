import json
import os
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è TuTiBot —Å –ò–ò-–æ—Ç–≤–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ OpenAI
    Args: event - dict —Å httpMethod, body (message, hasImage)
          context - –æ–±—ä–µ–∫—Ç —Å request_id
    Returns: HTTP response —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        user_message: str = body_data.get('message', '')
        has_image: bool = body_data.get('hasImage', False)
        
        openai_key = os.environ.get('OPENAI_API_KEY')
        
        if not openai_key:
            response_text = get_fallback_response(user_message, has_image)
        else:
            try:
                import openai
                openai.api_key = openai_key
                
                system_prompt = "–¢—ã TuTiBot - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                
                if has_image:
                    system_prompt += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–º–æ–≥–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ."
                
                completion = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_message}
                    ],
                    max_tokens=500,
                    temperature=0.7
                )
                
                response_text = completion.choices[0].message.content
                
            except Exception:
                response_text = get_fallback_response(user_message, has_image)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({
                'response': response_text,
                'timestamp': context.request_id
            })
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'isBase64Encoded': False,
            'body': json.dumps({'error': str(e)})
        }


def get_fallback_response(message: str, has_image: bool) -> str:
    if has_image:
        return 'üñºÔ∏è –í–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞.'
    
    lower = message.lower()
    
    if any(word in lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
        return '–ü—Ä–∏–≤–µ—Ç! –Ø TuTiBot, —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä'
    
    if any(word in lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ —Å–∞–º']):
        return '–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ 24/7 üöÄ'
    
    if any(word in lower for word in ['–ø–æ–º–æ—â—å', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —É–º–µ–µ—à—å']):
        return '''–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ üòä'''
    
    if any(word in lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
        return '–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å! üòä'
    
    if '?' in message or any(word in lower for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º']):
        return f'–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º... {message[:50]}{"..." if len(message) > 50 else ""}\n\n–î–ª—è –±–æ–ª–µ–µ —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤—å OpenAI API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏! ü§ñ'
    
    return '–ü–æ–Ω—è–ª —Ç–µ–±—è! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –î–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤—å OpenAI API –∫–ª—é—á! ü§î'
